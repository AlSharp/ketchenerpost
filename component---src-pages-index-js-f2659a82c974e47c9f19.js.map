{"version":3,"sources":["webpack:///./src/components/latestArticles.js","webpack:///./src/pages/index.js","webpack:///./src/components/image.js","webpack:///./src/components/seo.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["latestArticles","styled","props","react_default","a","createElement","className","articles","map","article","_article$node","node","id","_article$node$frontma","frontmatter","title","date","author","description","path","_article$node$frontma2","img","publicURL","childImageSharp","sizes","srcSet","key","src","gatsby_browser_entry","to","_templateObject","__webpack_require__","d","__webpack_exports__","pageQuery","IndexPage","layout","seo","keywords","components_latestArticles","data","allMarkdownRemark","edges","Image","react__WEBPACK_IMPORTED_MODULE_2___default","gatsby__WEBPACK_IMPORTED_MODULE_3__","query","render","gatsby_image__WEBPACK_IMPORTED_MODULE_4___default","fixed","placeholderImage","style","marginRight","imgStyle","margin","_public_static_d_2827433203_json__WEBPACK_IMPORTED_MODULE_1__","SEO","_ref","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","concat","length","join","defaultProps","propTypes","PropTypes","string","arrayOf","object","isRequired","Header","siteTitle","backgroundColor","marginBottom","display","maxWidth","padding","components_image","fontSize","lineHeight","color","textDecoration","Layout","children","Fragment","header","paddingTop","Date","getFullYear","_755544856"],"mappings":"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","file":"component---src-pages-index-js-f2659a82c974e47c9f19.js","sourcesContent":["import React from 'react'\nimport { Link } from \"gatsby\"\nimport styled from 'styled-components';\n\nconst _latestArticles = props => {\n  return (\n    <div className={props.className}>\n      {\n        props.articles.map(article => {\n          const {\n            id, \n            frontmatter: {\n              title, date, author, description, path,\n              img: {\n                publicURL,\n                childImageSharp: {sizes: {srcSet}}\n              }\n            }\n          } = article.node;\n          return (\n            <div key={id} className=\"top-article\">\n              <h3>{title}</h3>\n              <div>\n                <div>\n                  <img src={publicURL} />\n                </div>\n                <div>\n                  <div>\n                    {description}\n                  </div>\n                  <Link to={path}>Read more</Link>\n                </div>\n              </div>\n              <p>By {author} on {date}</p>\n            </div>\n          )\n        })\n      }\n    </div>\n  )\n};\n\nconst latestArticles = styled(_latestArticles)`\n  @media (min-width: 980px) {\n    & > .top-article {\n      border-bottom: 1px solid #ccc;\n      margin-bottom: 6px;\n    };\n    & > .top-article > h3 {\n      font-size: 1.4rem;\n      margin-bottom: 12px;\n    };\n    & > .top-article > div {\n      display: flex;\n    }\n    & > .top-article > div > div:first-child > img {\n      max-height: 200px;\n      max-width: 200px;\n      width: auto;\n      height: auto;\n      margin: 0\n    };\n    & > .top-article > div > div:last-child {\n      margin-left: 12px;\n    }\n    & > .top-article > p {\n      font-size: 14px;\n      margin-bottom: 6px;\n      text-align: right;\n    }\n  };\n  @media (max-width: 979px) {\n    & > .top-article {\n      border-bottom: 1px solid #ccc;\n      margin-bottom: 6px;\n    };\n    & > .top-article > p {\n      font-size: 14px;\n      margin: 6px 0;\n      text-align: right;\n    }\n  }\n  \n`;\n\nexport default latestArticles;\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Image from \"../components/image\"\nimport SEO from \"../components/seo\"\nimport LatestArticles from '../components/latestArticles';\n\nconst IndexPage = props => (\n  <Layout>\n    <SEO title=\"Home\" keywords={[`gatsby`, `application`, `react`]} />\n    <LatestArticles articles={props.data.allMarkdownRemark.edges} />\n  </Layout>\n)\n\nexport const pageQuery = graphql`\n  query LatestArticlesQuery {\n    allMarkdownRemark {\n      edges {\n        node {\n          frontmatter {\n            path,\n            date\n            title\n            author\n            description\n            img {\n              publicURL\n              childImageSharp {\n                sizes(maxWidth: 1240) {\n                  srcSet\n                }\n              }\n            }\n          }\n          id\n        }\n      }\n    }\n  }\n`\n\nexport default IndexPage\n","import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `StaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.dev/gatsby-image\n * - `StaticQuery`: https://gatsby.dev/staticquery\n */\n\nconst Image = () => (\n  <StaticQuery\n    query={graphql`\n      query {\n        placeholderImage: file(relativePath: { eq: \"ketchener-icon-blue.png\" }) {\n          childImageSharp {\n            fixed(width: 40, height: 40) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n      }\n    `}\n    render={data =>\n      <Img\n        fixed={data.placeholderImage.childImageSharp.fixed}\n        style={{marginRight: 10}}\n        imgStyle={{margin: 0}}\n      />\n    }\n  />\n)\nexport default Image\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\nimport Image from './image';\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      backgroundColor: '#983939',\n      marginBottom: `1.5rem`,\n    }}\n  >\n    <div\n      style={{\n        display: 'flex',\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `0.5rem 1.0875rem`\n      }}\n    >\n      <Image />\n      <h1 style={{ margin: 0, fontSize: '2.2rem', lineHeight: '2.1rem' }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div\n          style={{\n            margin: `0 auto`,\n            maxWidth: 960,\n            padding: `0px 1.0875rem 1.45rem`,\n            paddingTop: 0,\n          }}\n        >\n          <main>{children}</main>\n          <footer>\n            www.ketchenerpost.com © {new Date().getFullYear()},\n            {` `}\n            The Ketchener Post\n          </footer>\n        </div>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}